{"version":3,"file":"yetanotherstore.js","sources":["../src/Store.js"],"sourcesContent":["import EventManager from '@jonathanlurie/eventmanager'\n\n\n/**\n * A store is a place to store 'key:value' tuples. A key is generally a string\n * and unique identifier within the store. The value can be anything.\n *\n * This store provides some events, such as 'valueSet', 'set:{key}', 'valueDeleted',\n * 'del:{key}' and 'reseted'. Those event can be subscribed to with the following:\n * ```js\n * myStoreInstance.on( THE_EVENT_NAME, (val) => {\n *   // do something\n * })\n * ```\n */\nclass Store extends EventManager {\n\n  constructor(){\n    super()\n    this._storage = {}\n    this._gateKeeper = null\n    this._locked = false\n  }\n\n\n  /**\n   * Add or update a value in the store, under the name of the key.\n   * Throw the events:\n   *   - 'valueDeleted' with the argument {key: string, value: any, previousValue: any}\n   *   - 'set:{key}' where {key} is the key as a string, with the argument {key: string, value: any, previousValue: any}\n   * @param {string|number} key - identifier of the value\n   * @param {any} value - the value\n   * @param {boolean} forceLock - bypass the locked after the .lock() methods was called.\n   * @return {string} the key as a string\n   */\n  set(key, value, forceLock = false){\n    if(this._locked && !forceLock){\n      return\n    }\n\n    if(typeof key === 'object'){\n      throw new Error('Keys cannot be object')\n      return\n    }\n\n    let validKey = key.toString()\n    let argObj = {\n      key: validKey,\n      value: value\n    }\n\n    if(this._gateKeeper){\n      let isValid = this._gateKeeper(key, value)\n      if(!isValid){\n        return this.emit('refused', [argObj])\n      }\n    }\n\n    argObj.previousValue = this._storage[validKey] // possibly undefined\n    this._storage[validKey] = value\n    this.emit('valueSet', [argObj])\n    this.emit(`set:${validKey}`, [argObj])\n    return validKey\n  }\n\n\n\n  /**\n   * Retrieve the value corresponding to the 'key'\n   * @param {string|number} key - identifier of the value\n   * @return {any|undefined} the value, possibly 'undefined' if not in store\n   */\n  get(key){\n    let validKey = key.toString()\n    return this._storage[validKey]\n  }\n\n\n  /**\n   * Delete a value from the store, using its key as identifier.\n   * Throw the events:\n   *   - 'valueDeleted' with the argument {key: string, value: any}\n   *   - 'del:{key}' where {key} is the key as a string, with the argument {key: string, value: any}\n   * @param {string|number} key - identifier of the value\n   * @return {boolean} true if the value was successfully deleted, false if not (because not found)\n   */\n  delete(key){\n    let validKey = key.toString()\n    if(validKey in this._storage){\n      const argObj = {\n        key: validKey,\n        value: this._storage[validKey]\n      }\n\n      delete this._storage[validKey]\n      this.emit('valueDeleted', [argObj])\n      this.emit(`del:${validKey}`, [argObj])\n      return true\n    }\n\n    return false\n  }\n\n\n  /**\n   * Check if a given key is in the store\n   * @param {string|number} key - identifier of the value\n   * @return {boolean} true if is in store, false if not\n   */\n  has(key){\n    return (key.toString() in this._storage)\n  }\n\n\n  /**\n   * Flush the store, remove everything.\n   * Throw the event 'reseted' with no argument.\n   */\n  reset(){\n    this._storage = {}\n    this.emit('reseted', [])\n  }\n\n\n  /**\n   * Get all the keys in the store\n   * @return {Array} array of strings\n   */\n  keys(){\n    return Object.keys(this._storage)\n  }\n\n\n  /**\n   * Get all the values from the store, without the keys\n   * @return {Array}\n   */\n  values(){\n    return Object.values(this._storage)\n  }\n\n\n  /**\n   * Define the gate keeper function.\n   * This function is a data validator for the .set method. It takes two arguments\n   * (the key and the value of the piece of data to add) and returns true (valid to be added)\n   * of false (not valid to be added). If the object is non valid to be added, then the event\n   * 'refused' is emitted, with the arg {key, value}.\n   * If the gatekeeper function is no set or set to null, the feature is not used and no\n   * control will happen on the call of the .set method/\n   * @param {function|null} fn - the gatekeeper function\n   */\n  setGateKeeper(fn) {\n    if(typeof fn === 'function' || fn === null){\n      this._gateKeeper = fn\n    }\n  }\n\n\n  /**\n   * Check if the store is locked\n   * @return {boolean}\n   */\n  isLocked(){\n    return this._locked\n  }\n\n\n  /**\n   * Lock the store, so that the .set method cannot be used unless the\n   * arg forceLock is set to true.\n   */\n  lock(){\n    this._locked = true\n  }\n\n\n  /**\n   * No longer use the lock\n   */\n  unlock(){\n    this._locked = false\n  }\n\n\n  /**\n   * Add an event to when a key is being set. Equivalent to `on('set:keyName, fn)` but shorter\n   * @param {String} key - unique key of an entry in the store\n   * @param {callback} fn - callback function for when this key is being set\n   */\n  onSet(key, fn) {\n    return this.on(`set:${key}`, fn)\n  }\n\n\n  /**\n   * Add an event to when a key is being deleted. Equivalent to `on('del:keyName, fn)` but shorter\n   * @param {String} key - unique key of an entry in the store\n   * @param {callback} fn - callback function for when this key is being deleted\n   */\n  onDelete(key, fn) {\n    return this.on(`del:${key}`, fn)\n  }\n\n}\n\nexport default Store\n"],"names":[],"mappings":"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"}